// chapter 5 - errors
// date: 22.02.2024
// Answered by Ohia Goodstar(me)

1.      What do we mean by “Programming is understanding”?
Ans.    Programming is understanding becuase you need to basically understand the requirements to write a computer program or implement code

2.      The chapter details the creation of a calculator program. Write a short
        analysis of what the calculator should be able to do.
Ans.    The calculator would handle only + - * / and would be read as an expression

3.      How do you break a problem up into smaller manageable parts?
Ans.    Using pseudo code

4.      Why is creating a small, limited version of a program a good idea?
Ans.    To avoid feature creep and it helps buiding a program less tedious and make you feel less overwhelmed

5.      Why is feature creep a bad idea?
Ans.    Feature creep is a bad idea because it makes it tedious and makes the original idea of a program seem    useless

6.      What are the three main phases of software development?
Ans.    Analysis, design and implementation

7.      What is a “use case”?
Ans.    This is a way a system can be used to anchieve a task

8.      What is the purpose of testing?
Ans.    Testing is used to check if the requirements/specifications of a program are all met

9.      According to the outline in the chapter, describe the difference between a
        Term, an Expression, a Number, and a Primary.
Ans.    a. Terms handles only multiplication, division and modulo operators and it is first calculated before an expression
        b. An expression calcualates only addition and subtraction Numbers, and it binds less tighter than term
        c. Number reads a floating point value
        d. Primary handles an expression in a bracket before it handles any other operations

10.     In the chapter, an input was broken down into its component Terms, Expressions,
        Primarys, and Numbers. Do this for (17+4)/(5–1).
Ans.    (21)/(4) = 21 / 4 = 5.25

11.     Why does the program not have a function called number()?
Ans.    Thats because we already have floating point types as an external function

12.     What is a token?
Ans.    Token is a sequence of characters that reads characters and a number

13.     What is a grammar? A grammar rule?
Ans.    A grammar lets us transform a program into a syntax tree
        Grammar rule is a rule that reads a stream of tokens and search through the tokens to find a match